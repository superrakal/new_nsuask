{
  "name": "ember-cli-coffeescript",
  "version": "1.13.2",
  "description": "Adds precompilation of CoffeeScript files and all the basic generation types to the `ember generate` command.",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": [
    "ember-addon",
    "coffeescript",
    "blueprints"
  ],
  "author": {
    "name": "Kim Røen"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/kimroen/ember-cli-coffeescript"
  },
  "bugs": {
    "url": "https://github.com/kimroen/ember-cli-coffeescript/issues"
  },
  "homepage": "https://github.com/kimroen/ember-cli-coffeescript",
  "dependencies": {
    "broccoli-coffee": "~0.5.0",
    "broccoli-persistent-filter": "^1.1.0",
    "chalk": "^1.0.0",
    "coffeelint": "^1.6.1",
    "ember-cli": "^1.13.0",
    "ember-cli-version-checker": "^1.0.1",
    "fs-extra": "^0.11.1",
    "ignore": "^2.2.15",
    "inflection": "^1.4.0",
    "json-stable-stringify": "^1.0.0",
    "lodash": "^2.4.1"
  },
  "ember-addon": {
    "before": [
      "ember-cli-babel"
    ]
  },
  "readme": "# CoffeeScript support for ember-cli\nAdds precompilation of CoffeeScript files and all the basic generation\ntypes to the `ember generate` command, as well as linting.\n\n### Includes\n- Generating files in CoffeeScript with `ember generate`\n- Preprocessing CoffeeScript-files in your app, including tests\n- Linting your CoffeeScript-files.\n\n### Install\n```\nember install ember-cli-coffeescript\n```\n\n**NB**: Is is tested using ember-cli version `1.13.0` and up. Some of it probably works on\nearlier versions, but I wouldn't know.\n\n### How to use\n\n#### CoffeeScript and ember-cli\nThere is one thing to note when using CoffeeScript with ember-cli: the syntax for _ES6-modules_.\nIn ember-cli-apps written in JavaScript, this is a common pattern:\n\n```js\n// app/components/my-component.js\nimport Ember from 'ember';\n\nexport default Ember.Component.extend({\n  tagName: 'div'\n});\n```\n\nWriting `import` or `export` in a CoffeeScript-file causes an error, so we'll need\nto escape these lines with backticks so they run as JavaScript.\n\nWe also need to store the export in a variable to export at the end, we can't export\ndirectly as done above. Please note that the name of this variable does not affect\nthe name of the component itself - that is based entirely on the file name and placement.\n\nHere's the above file in CoffeeScript:\n\n```coffee\n# app/components/my-component.coffee\n`import Ember from 'ember'`\n\nMyComponent = Ember.Component.extend\n  tagName: 'div'\n\n`export default MyComponent`\n```\n\nLuckily, all the blueprints included with ember-cli-coffeescript do this for you! Which\nleads to…\n\n#### Blueprints\nRun `ember help generate` to get a list of available blueprints. Use them by running `ember g <blueprint> <args>`. For instance, to generate the above component:\n\n```\nember g component my-component\n```\n\nember-cli-coffeescript comes with pod-support for the same blueprints as ember-cli\ndoes. Check out [the ember-cli docs for pods](http://www.ember-cli.com/#pods)\nfor instructions on how to use it.\n\nIf you'd like to use ember-cli-coffeescript without the blueprints, you can add\nthe following to your `config/environment.js`:\n\n```js\nENV.coffeeOptions = {\n  blueprints: false\n}\n```\n\nThis will make it fall back to the next blueprints in line (probably the ones\nfrom ember-cli).\n\n#### Precompiling\nThis will happen automatically - no work necessary.\n\n#### Linting\nIf you have a `coffeelint.json` file in the root of you project we will automatically pick up on it and start running linting on files when using the `ember build` and `ember serve` commands.\nIf you do not want linting to run despite having a `coffeelint.json` file, use the following configuration\nin your `config/environment.js`.\n\n```js\nENV.coffeeOptions = {\n  lint: false\n}\n```\n\nYou can set `lint` to `true` to enable linting with the default configurations, but you will probably\nwant to add a `coffeelint.json` file to the root of your project either way, for instance to turn\noff the error for backticks.\n\nExample `coffeelint.json`:\n\n```json\n{\n    \"no_backticks\": {\n        \"level\": \"ignore\"\n    }\n}\n```\n\nYou can find all the [available options on the website for `coffeelint`](http://www.coffeelint.org/#options).\n\nIf you want to specify a different path for your `coffeelint.json` file you can specify the path\n(relative to the project directory or absolute)\n\n```js\nENV.coffeeOptions = {\n  lint: {\n    configPath: \"configurations/coffeelint.json\"\n  }\n}\n```\n\nIf you want to change the way we format the output you can specify a custom error output and stats output\n\n```js\nENV.coffeeOptions = {\n  lint: {\n    formatter: function(filePath, lintResults) {  },\n    statsFormatter: function(stats) { console.log('Files: ', stats.fileCount, \"Errors: \", stats.errorCount) }\n  }\n}\n```\n\n**NOTE:** The lint results will show up twice when you build and run your app; once\nfor the app files, and then once for the test files. On rebuild, only the changed\nfiles are linted.\n\n##### Lintignore\nTo avoid linting specific files or folders, you can put a file named `.coffeelintignore`\nin the root of your project containing ignore-rules, one per line. This is just like a\n`.gitignore`-file, and it will follow the same rules.\n",
  "readmeFilename": "README.md",
  "_id": "ember-cli-coffeescript@1.13.2",
  "dist": {
    "shasum": "07a8facfcf94f62da7b52bbbf668068780f0c18c"
  },
  "_from": "ember-cli-coffeescript@1.13.2",
  "_resolved": "https://registry.npmjs.org/ember-cli-coffeescript/-/ember-cli-coffeescript-1.13.2.tgz"
}
