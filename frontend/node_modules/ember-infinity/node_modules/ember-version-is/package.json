{
  "name": "ember-version-is",
  "version": "0.0.3",
  "description": "Dead simple in browser Ember / Ember Data version checker.  Works with Ember Addons.",
  "directories": {
    "doc": "doc",
    "test": "tests"
  },
  "scripts": {
    "start": "ember server",
    "build": "ember build",
    "test": "ember try:testall"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/hhff/ember-version-is.git"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "author": {
    "name": "Hugh Francis"
  },
  "license": "MIT",
  "devDependencies": {
    "broccoli-asset-rev": "^2.0.2",
    "ember-cli": "0.2.7",
    "ember-cli-app-version": "0.3.3",
    "ember-cli-content-security-policy": "0.4.0",
    "ember-cli-dependency-checker": "^1.0.0",
    "ember-cli-htmlbars": "0.7.6",
    "ember-cli-ic-ajax": "0.1.1",
    "ember-cli-inject-live-reload": "^1.3.0",
    "ember-cli-qunit": "0.3.13",
    "ember-cli-uglify": "^1.0.1",
    "ember-data": "1.0.0-beta.18",
    "ember-disable-proxy-controllers": "^1.0.0",
    "ember-export-application-global": "^1.0.2",
    "ember-disable-prototype-extensions": "^1.0.0",
    "ember-try": "0.0.6"
  },
  "keywords": [
    "ember-addon"
  ],
  "dependencies": {
    "ember-cli-babel": "^5.0.0"
  },
  "ember-addon": {
    "configPath": "tests/dummy/config"
  },
  "readme": "# Ember Version Is\n\n[![Build Status](https://travis-ci.org/hhff/ember-version-is.svg)](https://travis-ci.org/hhff/ember-version-is)\n[![npm version](https://badge.fury.io/js/ember-version-is.svg)](http://badge.fury.io/js/ember-version-is)\n\nA super simple set of helpers designed to give Ember Addon developers a clean way of supporting multiple\nEmber & Ember Data versions.\n\nIt's basically a thin wrapper on Semver.\n\n## Installation\n\n```bash\n# In your Addon...\nnpm install ember-version-is --save\n```\n\nThen in your Addon's `index.js`:\n\n```js\n/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'ember-infinity',\n\n  /* Necessary Hack until Ember CLI supports nested addons. */\n  included: function(app) {\n    this.addons.forEach(function(addon){\n      if (addon.name === \"ember-version-is\") {\n        addon.included.apply(addon, [app]);\n      }\n    });\n  }\n};\n```\n\n## Usage\n\nThen anywhere in your codebase, you can do:\n\n```js\nimport Ember from 'ember';\nimport emberVersionIs from 'ember-version-is';\nimport { emberDataVersionIs } from 'ember-version-is';\n\nexport default Ember.Route.extend({\n  model() {\n    let promise;\n    if (emberDataVersionIs('lessThanOrEqualTo', \"1.13.0\")) {\n      promise = this.store.find('product', 1); \n    } else {\n      promise = this.store.query('product', 1);\n    }\n    return promise.then(response => {\n      if (emberVersionIs('equalTo', \"2.0.0\")) {\n        Ember.warn(\"You are using Ember 2.0.  That is rad.\");\n      }\n    });\n  }\n});\n```\n\nIf you'd like to check arbitary versions of things, you can do that too:\n\n```js\nimport Ember from 'ember';\nimport { is } from 'ember-version-is';\nconst VERSION = '0.2.3';\n\nexport default Ember.Route.extend({\n  activate() {\n    if (is(VERSION, 'lessThanOrEqualTo', '0.2.5')) {\n      this.set('techno', 'is making a comeback');\n    }\n  }\n});\n```\n\n[SemVer ranges](https://github.com/npm/node-semver#ranges) are supported as\nwell (works for `is`, `emberVersionIs` and `emberDataVersionIs`):\n\n```js\nimport Ember from 'ember';\nimport { is } from 'ember-version-is';\nconst VERSION = '0.2.8';\n\nexport default Ember.Route.extend({\n  activate() {\n    if (is(VERSION, '<= 0.2.5 || 0.2.8')) {\n      this.set('techno', 'is making a comeback');\n    }\n  }\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hhff/ember-version-is/issues"
  },
  "_id": "ember-version-is@0.0.3",
  "_from": "ember-version-is@0.0.3"
}
